#include <bits/stdc++.h>
using namespace std;

long long getMaximumBalancedSubstrings(long long L, long long R) {
  //long long maximumBalancedSubstrings = 0;
  long long k = min(L,R);
  return (k*(k+1))/2;

  // TODO: Complete this function to compute the maximum possible number of
  // non-empty substrings that form a balanced parenthesis.

  //return maximumBalancedSubstrings;
}

int main() {
  long long T;
  // Get number of test cases
  cin >> T;
  for (long long tc = 1; tc <= T; tc++) {
    long long L, R;
    cin >> L >> R;
    cout << "Case #" << tc << ": " << getMaximumBalancedSubstrings(L, R)
         << endl;
  }
  return 0;
}
